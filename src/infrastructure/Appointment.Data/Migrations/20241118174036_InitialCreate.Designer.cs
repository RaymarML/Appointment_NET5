// <auto-generated />
using System;
using Appointment.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Appointment.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241118174036_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("Appointment.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssignedEmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<float>("Discount")
                        .HasColumnType("REAL");

                    b.Property<float>("ExpectedPrice")
                        .HasColumnType("REAL");

                    b.Property<float>("FinalPrice")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("From")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedEmployeeId");

                    b.HasIndex("ClientId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Appointment.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Appointment.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FirstName")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastName")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Appointment.Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookingId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("From")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Appointment.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Appointment.Domain.Entities.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookingId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Done")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("Appointment.Domain.Entities.Booking", b =>
                {
                    b.HasOne("Appointment.Domain.Entities.Employee", "AssignedEmployee")
                        .WithMany("AssignedBookings")
                        .HasForeignKey("AssignedEmployeeId");

                    b.HasOne("Appointment.Domain.Entities.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId");

                    b.Navigation("AssignedEmployee");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Appointment.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Appointment.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("Appointment.Domain.Entities.Employee", "Employee")
                        .WithMany("Schedules")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Booking");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Appointment.Domain.Entities.ServiceRequest", b =>
                {
                    b.HasOne("Appointment.Domain.Entities.Booking", "Booking")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("BookingId");

                    b.HasOne("Appointment.Domain.Entities.Service", "Service")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Booking");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Appointment.Domain.Entities.Booking", b =>
                {
                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("Appointment.Domain.Entities.Client", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Appointment.Domain.Entities.Employee", b =>
                {
                    b.Navigation("AssignedBookings");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Appointment.Domain.Entities.Service", b =>
                {
                    b.Navigation("ServiceRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
